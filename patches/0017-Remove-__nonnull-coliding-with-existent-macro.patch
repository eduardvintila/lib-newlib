From d5dccbc80d1d8b52178b3a6a232d51f1965d0b42 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Eduard=20Vintil=C4=83?= <eduard.vintila47@gmail.com>
Date: Sat, 6 May 2023 02:26:51 +0300
Subject: [PATCH] Remove `__nonnull()` coliding with existent macro
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

The `__nonnull` macro is already defined in `uk/essentials.h`, so we
remove newlib's definition and references to its parametrized macro,
`__nonnull()`.

Co-authored-by: Stefan Jumarea <stefanjumarea02@gmail.com>
Signed-off-by: Eduard VintilÄƒ <eduard.vintila47@gmail.com>
---
 newlib/libc/include/pthread.h   | 56 ++++++++++++++++-----------------
 newlib/libc/include/stdlib.h    |  7 +++--
 newlib/libc/include/string.h    |  3 +-
 newlib/libc/include/sys/cdefs.h |  9 +-----
 4 files changed, 35 insertions(+), 40 deletions(-)

diff --git a/newlib/libc/include/pthread.h b/newlib/libc/include/pthread.h
index 516131d..d2b7d8f 100644
--- a/newlib/libc/include/pthread.h
+++ b/newlib/libc/include/pthread.h
@@ -41,7 +41,7 @@ struct _pthread_cleanup_context {
 /* Register Fork Handlers */
 int	_EXFUN(pthread_atfork,(void (*prepare)(void), void (*parent)(void),
                    void (*child)(void)));
-          
+
 /* Mutex Initialization Attributes, P1003.1c/Draft 10, p. 81 */
 
 int	_EXFUN(pthread_mutexattr_init, (pthread_mutexattr_t *__attr));
@@ -69,7 +69,7 @@ int	_EXFUN(pthread_mutex_init,
 int	_EXFUN(pthread_mutex_destroy, (pthread_mutex_t *__mutex));
 
 /* This is used to statically initialize a pthread_mutex_t. Example:
-  
+
     pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
  */
 
@@ -90,7 +90,7 @@ int	_EXFUN(pthread_mutex_timedlock,
 #endif /* _POSIX_TIMEOUTS */
 
 /* Condition Variable Initialization Attributes, P1003.1c/Draft 10, p. 96 */
- 
+
 int	_EXFUN(pthread_condattr_init, (pthread_condattr_t *__attr));
 int	_EXFUN(pthread_condattr_destroy, (pthread_condattr_t *__attr));
 
@@ -104,34 +104,34 @@ int	_EXFUN(pthread_condattr_getpshared,
 		(_CONST pthread_condattr_t *__attr, int *__pshared));
 int	_EXFUN(pthread_condattr_setpshared,
 		(pthread_condattr_t *__attr, int __pshared));
- 
+
 /* Initializing and Destroying a Condition Variable, P1003.1c/Draft 10, p. 87 */
- 
+
 int	_EXFUN(pthread_cond_init,
 	(pthread_cond_t *__cond, _CONST pthread_condattr_t *__attr));
 int	_EXFUN(pthread_cond_destroy, (pthread_cond_t *__mutex));
- 
+
 /* This is used to statically initialize a pthread_cond_t. Example:
-  
+
     pthread_cond_t cond = PTHREAD_COND_INITIALIZER;
  */
- 
+
 #define PTHREAD_COND_INITIALIZER _PTHREAD_COND_INITIALIZER
- 
+
 /* Broadcasting and Signaling a Condition, P1003.1c/Draft 10, p. 101 */
- 
+
 int	_EXFUN(pthread_cond_signal, (pthread_cond_t *__cond));
 int	_EXFUN(pthread_cond_broadcast, (pthread_cond_t *__cond));
- 
+
 /* Waiting on a Condition, P1003.1c/Draft 10, p. 105 */
- 
+
 int	_EXFUN(pthread_cond_wait,
 	(pthread_cond_t *__cond, pthread_mutex_t *__mutex));
- 
+
 int	_EXFUN(pthread_cond_timedwait,
 		(pthread_cond_t *__cond, pthread_mutex_t *__mutex,
 		_CONST struct timespec *__abstime));
- 
+
 #if defined(_POSIX_THREAD_PRIORITY_SCHEDULING)
 
 /* Thread Creation Scheduling Attributes, P1003.1c/Draft 10, p. 120 */
@@ -171,15 +171,15 @@ int	_EXFUN(pthread_setschedprio, (pthread_t thread, int prio));
 #endif /* defined(_POSIX_THREAD_PRIORITY_SCHEDULING) */
 
 #if __GNU_VISIBLE
-int	pthread_getname_np(pthread_t, char *, size_t) __nonnull(2);
+int	pthread_getname_np(pthread_t, char *, size_t);
 
-int	pthread_setname_np(pthread_t, const char *) __nonnull(2);
+int	pthread_setname_np(pthread_t, const char *);
 #endif
 
 #if defined(_POSIX_THREAD_PRIO_INHERIT) || defined(_POSIX_THREAD_PRIO_PROTECT)
 
 /* Mutex Initialization Scheduling Attributes, P1003.1c/Draft 10, p. 128 */
- 
+
 int	_EXFUN(pthread_mutexattr_setprotocol,
 	(pthread_mutexattr_t *__attr, int __protocol));
 int	_EXFUN(pthread_mutexattr_getprotocol,
@@ -227,14 +227,14 @@ int	_EXFUN(pthread_attr_getguardsize,
 int	_EXFUN(pthread_attr_setguardsize,
 	(pthread_attr_t *__attr, size_t __guardsize));
 
-/* POSIX thread APIs beyond the POSIX standard but provided 
+/* POSIX thread APIs beyond the POSIX standard but provided
  * in GNU/Linux. They may be provided by other OSes for
  * compatibility.
  */
 #if __GNU_VISIBLE
-#if defined(__rtems__) 
+#if defined(__rtems__)
 int	_EXFUN(pthread_attr_setaffinity_np,
-	(pthread_attr_t *__attr, size_t __cpusetsize, 
+	(pthread_attr_t *__attr, size_t __cpusetsize,
 	const cpu_set_t *__cpuset));
 int 	_EXFUN(pthread_attr_getaffinity_np,
 	(const pthread_attr_t *__attr, size_t __cpusetsize,
@@ -291,13 +291,13 @@ void	_EXFUN(pthread_yield, (void));
 /* Dynamic Package Initialization */
 
 /* This is used to statically initialize a pthread_once_t. Example:
-  
+
     pthread_once_t once = PTHREAD_ONCE_INIT;
-  
+
     NOTE:  This is named inconsistently -- it should be INITIALIZER.  */
- 
+
 #define PTHREAD_ONCE_INIT _PTHREAD_ONCE_INIT
- 
+
 int	_EXFUN(pthread_once,
 	(pthread_once_t *__once_control, void (*__init_routine)(void)));
 
@@ -375,12 +375,12 @@ void	_EXFUN(_pthread_cleanup_pop_restore,
 #endif /* __GNU_VISIBLE */
 
 #if defined(_POSIX_THREAD_CPUTIME)
- 
+
 /* Accessing a Thread CPU-time Clock, P1003.4b/D8, p. 58 */
- 
+
 int	_EXFUN(pthread_getcpuclockid,
 	(pthread_t __pthread_id, clockid_t *__clock_id));
- 
+
 #endif /* defined(_POSIX_THREAD_CPUTIME) */
 
 
@@ -419,7 +419,7 @@ int	_EXFUN(pthread_spin_unlock, (pthread_spinlock_t *__spinlock));
 #if defined(_POSIX_READER_WRITER_LOCKS)
 
 /* This is used to statically initialize a pthread_rwlock_t. Example:
-  
+
     pthread_mutex_t mutex = PTHREAD_RWLOCK_INITIALIZER;
  */
 
diff --git a/newlib/libc/include/stdlib.h b/newlib/libc/include/stdlib.h
index f81b112..204c268 100644
--- a/newlib/libc/include/stdlib.h
+++ b/newlib/libc/include/stdlib.h
@@ -18,6 +18,7 @@
 #include <sys/reent.h>
 #include <sys/cdefs.h>
 #include <machine/stdlib.h>
+#include <uk/essentials.h>
 #ifndef __STRICT_ANSI__
 #include <alloca.h>
 #endif
@@ -39,13 +40,13 @@
 
 _BEGIN_STD_C
 
-typedef struct 
+typedef struct
 {
   int quot; /* quotient */
   int rem; /* remainder */
 } div_t;
 
-typedef struct 
+typedef struct
 {
   long quot; /* quotient */
   long rem; /* remainder */
@@ -338,7 +339,7 @@ static inline int posix_memalign(void **memptr, size_t align, size_t size)
 }
 #endif /* __UK_HAVE_POSIX_MEMALIGN__ */
 #else
-int _EXFUN(__nonnull (1) posix_memalign,(void **, size_t, size_t));
+int _EXFUN(__nonnull posix_memalign,(void **, size_t, size_t));
 #endif
 #endif
 
diff --git a/newlib/libc/include/string.h b/newlib/libc/include/string.h
index 9c536f3..21e9088 100644
--- a/newlib/libc/include/string.h
+++ b/newlib/libc/include/string.h
@@ -11,6 +11,7 @@
 #include <sys/reent.h>
 #include <sys/cdefs.h>
 #include <sys/features.h>
+#include <uk/essentials.h>
 
 #define __need_size_t
 #define __need_NULL
@@ -169,7 +170,7 @@ int	 _EXFUN(strverscmp,(const char *, const char *));
    sure here. */
 #if __GNU_VISIBLE && !defined(basename)
 # define basename basename
-char	*_EXFUN(__nonnull (1) basename,(const char *)) __asm__(__ASMNAME("__gnu_basename"));
+char	*_EXFUN(__nonnull basename,(const char *)) __asm__(__ASMNAME("__gnu_basename"));
 #endif
 
 #include <sys/string.h>
diff --git a/newlib/libc/include/sys/cdefs.h b/newlib/libc/include/sys/cdefs.h
index aff864b..85e0129 100644
--- a/newlib/libc/include/sys/cdefs.h
+++ b/newlib/libc/include/sys/cdefs.h
@@ -397,13 +397,6 @@
 #define	__noinline
 #endif
 
-#if __GNUC_PREREQ__(3, 3)
-#define	__nonnull(x)	__attribute__((__nonnull__(x)))
-#define	__nonnull_all	__attribute__((__nonnull__))
-#else
-#define	__nonnull(x)
-#define	__nonnull_all
-#endif
 
 #if __GNUC_PREREQ__(3, 4)
 #define	__fastcall	__attribute__((__fastcall__))
@@ -649,7 +642,7 @@
  * Type Safety Checking
  *
  * Clang provides additional attributes to enable checking type safety
- * properties that cannot be enforced by the C type system. 
+ * properties that cannot be enforced by the C type system.
  */
 
 #if __has_attribute(__argument_with_type_tag__) && \
-- 
2.40.0

